commands:
  - name: Map
    arguments:
        - name: array
          type: mapping
        - name: function
          type: lambda-1-implicit
    return: mapping
    description: Apply a function to every element of a collection, and return the result. Result is lazy, function only executed when needed. Not nececairly executed in order. Side effect override this behavior.
  - name: Filter
    arguments:
        - name: array
          type: generator
        - name: function
          type: lambda-1-implicit
    return: generator
    description: Apply a function to every element, keeping only truthy elements. Result is lazy, function only executed when needed, but always in order. Side effect force immediate execution.
  - name: Reduce
    arguments:
        - name: array
          type: generator
        - name: initial value
          type: scalar
        - name: function
          type: lambda-2-implicit
    return: scalar
    description: apply a function to every pair of elements. Return the final result.
  - name: Fold
    arguments:
        - name: array
          type: generator
        - name: function
          type: lambda-2-implicit

    return: scalar
    description: apply a function to every pair of elements. Return the final result.
  - name: Scan
    arguments:
        - name: array
          type: generator
        - name: initial value
          type: scalar
        - name: function
          type: lambda-2-implicit
    return: scalar
    description: Map with state. Function should return a array of 2 elements, the second will be passed as the second argument to the next iteration.
  - name: Successors
    arguments:
        - name: initial value
          type: scalar
        - name: function
          type: lambda-1-implicit
    return: generator
    description: Repeatedly apply a function to a initial value, returning a infinite generator of each intermediate value.
  - name: Fixed Point
    arguments:
        - name: initial value
          type: scalar
        - name: function
          type: lambda-1-implicit
    return: scalar
    description: Repeatedly apply a funnction to it's own output till the result stops changing, then return that value. May cause infinte loop if the function does not converge.
  - name: Take While
    arguments:
        - name: array
          type: generator
        - name: function
          type: lambda-1-implicit
    return: generator
    description: Truncate the list to before the first element so that f(x) returns a fasly value.
  - name: Any
    arguments:
        - name: array
          type: generator
        - name: function
          type: lambda-1-implicit
    return: boolean
    description: return True if for any x in the array f(x) returns a truthy value. May loop infinitely for a infinitely sized array that's all false.
  - name: All
    arguments:
        - name: array
          type: generator
        - name: function
          type: lambda-1-implicit
    return: boolean
    description: return False if for any x in the array f(x) returns a falsy value. May loop infinitely for a infinitely sized array that's all true.
  - name: Length
    arguments:
        - name: array
          type: array
    return: integer
    description: return the length of a list. Generators or mappings may need to be converted to lists, which will fully evaluate them.
  - name: First
    arguments:
        - name: generator
          type: generator
    return: scalar
    description: Return the first value of a array
  - name: Last
    arguments:
        - name: array
          type: array
    return: scalar
    description: Return the last value of a array
  - name: Nth
    arguments:
        - name: array
          type: array
        - name: index
          type: integer
    return: scalar
    description: return the nth element of a array. Negativee values wrap to the end of the array. Negative elements thus require a array of finite length.
  - name: Slice
    arguments:
        - name: array
          type: array
        - name: start
          type: integer
        - name: end
          type: integer
    return: generator
    description: slize a subsequence from a array. Start and end are both inclusive. Negative values wrap.
  - name: Sum
    arguments:
        - name: array
          type: generator
        - name: function
          type: lambda-1-implicit
    return: scalar
    description: Sum f(x) for every value in the array
  - name: All Equal
    arguments:
        - name: array
          type: generator
        - name: function
          type: lambda-1-implicit
    return: boolean
    description: If f(x) is equal for all element of the array
  - name: Average
    arguments:
        - name: array
          type: generator
    return: scalar
    description: the sum divided by the length
  - name: Median
    arguments:
        - name: array
          type: generator
    return: scalar
    description: Sort the array and return the middle element.
  - name: Mode
    arguments:
        - name: array
          type: generator
    return: scalar
    description: Return the most common element in a generator. In case of a tie the first element is returned.
  - name: Truncate
    arguments:
      - name: array
        type: generator/mapping
      - name: max
        type: integer
    return: generator
    description: Limit a array to max N elements
  - name: Chain
    arguments:
      - name: array1
        type: generator
      - name: array2
        type: generator
    return: generator
    description: concatenate 2 arrays
  - name: FlattenOnce
    arguments:
      - name: array
        type: generator
    return: generator
    description: Flatten (once) a generator of generators
  - name: FlattenN
    arguments:
      - name: array
        type: generator
      - name: N
        type: integer
    return: generator
    description: flatten a generator, then recurisvely flatten each element up to a depth of N.
  - name: Delete Nth
    arguments:
      - name: array
        type: generator/mapping
      - name: index
        type: integer
    return: generator/mapping
    description: delete the Nth element of a collection, returns a new list with all elements 
    fter N shifted 1 to the left.
  - name: Replace Nth
    arguments:
      - name: array
        type: mapping
      - name: N
        type: integer
      - name: replacement
        type: scalar
    return: mapping
    descritption: Return a new array that replaces the Nth element with replacement.
  - name: Insert at N
    arguments:
      - name: array
        type: mapping
      - name: N
        type: integer
      - name: value
        type: scalar
    return: mapping
    description: Return a new array that inserts value in position N, moving all values after N to the right
  - name: Prepend
    arguments:
      - name: array
        type: generator/mapping
      - name: value
        type: scalar
    return: generator/mapping
    description: Return a new array which has value as it's first element and array as all the rest
  - name: Append
    arguments:
      - name: array
        type: generator
      - name: value
        type: scalar
    return: generator
    descritption: Return a new generator with value inserted at the end
  - name: Delete Range
    arguments:
      - name: array
        type: generator/mapping
      - name: start
        type: integer
      - name: end
        type: integer
    return: generator/mapping
    description: Return a new generator with the given range removed.
  - name: Replace Range
    arguments:
      - name: array
        type: generator/mapping
      - name: start
        type: integer
      - name: end
        type: integer
      - name: replacement
        type: array
    return: mapping/generator
    description: Replace the range given by start/end with a new range
  - name: Delete First Equals
    arguments:
      - name: array
        type: generator
      - name: value
        type: scalar
    return: generator
  - name: Delete All Equals
    arguments:
      - name: array
        type: generator
      - name: value
        type: scalar
    return: generator
    description: Return a generator with all items equal to value removed
  - name: Chunks
    arguments:
      - name: array
        type: generator/mapping
      - name: chunk size
        type: integer
    return: generator
    description: Return a array of arrays, each being a slice of chunk size. Each chunk ends right before the next one starts.
  - name: Chunks Overlapping
    arguments:
      - name: array
        type: generator/mapping
      - name: chunk size
        type: integer
    return: generator
    description: Return a array of arrays, each chunk size long. The start of each array is offset by 1, thus the chunks will overlap.
  - name: Transpose
    arguments:
      - name: array
        type: array
    return: generator
    description: Given a array of arrays return a array that iterates over the first of each subarray, then the second etc.
  - name: Zip
    arguments:
      - name: array_1
        type: generator/mapping
      - name: array_2
        type: generator/mapping
    return: generator/mapping
    descritpion: Given 2 array return a generator of pairs of values, one from each
  - name: MultiSetUnion
    arguments:
      - name: array_1
        type: array
      - name: array_2
        type: array
    return: generator
    description: Each element will appear max(a,b) times where a is how often it appears in array_1 and b is how often it appears in array_2
  - name: MultiSetIntersection
    arguments:
      - name: array_1
        type: array
      - name: array_2
        type: array
    return: generator
    description: Each element will appear min(a,b) times where a is how often it appears in array_1 and b is how often it appears in array_2
  - name: MultiSetDifference
    arguments:
      - name: array_1
        type: array
      - name: array_2
        type: array
    return: array
    description: Each element will appear max(0,a-b) times where a is how often it appears in array_1 and b is how often it appears in array_2
  - name: Sort
    arguments:
      - name: array
        type: array
    return: array
    description: Sort a array in lexicographical order
  - name: Sort reverse
    arguments:
      - name: array
        type: array
    return: array
    description: Sort a array in reverse lexicographical order
  - name: Sort by key
    arguments:
      - name: array
        type: array
      - name: function
        type: lambda-1-implicit
    description: Sort a array by the result of applying the function to each element
  - name: Intersperse
    arguments:
      - name: array
        type: generator
      - name: value
        type: scalar
    description: Return a new array with scalar inserted between each 2 elements.
  - name: Uniquefy
    arguments:
      - name: array
        type: array
    return: arraay
    description: Return a array where each element that appeared multiple times now appears once
  - name: Local Maxima
    